// SPDX-License-Identifier: GPL-2.0-or-later OR MIT

//#include "ar9344_devolo_dlan_wifi.dtsi"
#include "ar9344.dtsi"

#include <dt-bindings/gpio/gpio.h>
#include <dt-bindings/input/input.h>

/ {
	model = "Devolo dLAN pro wireless 500+";
	compatible = "devolo,dlan-pro-500-wp", "qca,ar9344";

	aliases {
		led-boot = &led_status_green;
		led-failsafe = &led_wlan_blue;
		led-running = &led_status_green;
		led-upgrade = &led_wlan_blue;
	};

    // Taken from old-upstream 
    // target/linux/ar71xx/files/arch/mips/ath79/mach-dlan-pro-500-wp.c
	leds {
		compatible = "gpio-leds";

		led_wlan_green: wlan_green {
			label = "green:wlan";
			gpios = <&gpio 12 GPIO_ACTIVE_LOW>;
			linux,default-trigger = "phy1tpt";
		};

		led_wlan_blue: wlan_blue {
			label = "blue:wlan";
			gpios = <&gpio 11 GPIO_ACTIVE_LOW>;
			linux,default-trigger = "phy1tpt";
		};

		led_status_green: status_green {
			label = "green:status";
			gpios = <&gpio 16 GPIO_ACTIVE_LOW>;
		};

		led_eth_green: eth_green {
			label = "green:eth";
			gpios = <&gpio 14 GPIO_ACTIVE_LOW>;
		};

		led_dlan_a: dlan_a {
			label = "a:dlan";
			gpios = <&gpio 13 GPIO_ACTIVE_LOW>;
		};

		led_dlan_b: dlan_b {
			label = "b:dlan";
			gpios = <&gpio 17 GPIO_ACTIVE_LOW>;
		};
	};

	keys {
		compatible = "gpio-keys";

		reset {
			label = "Reset button";
			linux,code = <KEY_RESTART>;
			gpios = <&gpio 4 GPIO_ACTIVE_LOW>;
			debounce-interval = <60>;
		};

		wifi {
			label = "WIFI button";
			linux,code = <KEY_RFKILL>;
			gpios = <&gpio 22 GPIO_ACTIVE_LOW>;
			debounce-interval = <60>;
		};

		dlan {
			label = "DLAN button";
			linux,code = <BTN_0>;
			gpios = <&gpio 21 GPIO_ACTIVE_LOW>;
			debounce-interval = <60>;
		};
	};
};


&gpio {
	wlan_power {
		gpio-hog;
		line-name = "WLAN power";
		gpios = <&gpio 22 GPIO_ACTIVE_HIGH>;
		output-high;
	};
};

// Taken from target/linux/ar71xx/image/legacy.mk in the 19.07 branch:
// dlan_pro_500_wp_mtdlayout=mtdparts=spi0.0:256k(u-boot)ro,64k(u-boot-env)ro,64k(Config1)ro,64k(Config2)ro,7680k@0x70000(firmware),64k(art)ro
// dlan_pro_1200_ac_mtdlayout=mtdparts=spi0.0:256k(u-boot)ro,64k(u-boot-env)ro,64k(Config1)ro,64k(Config2)ro,15872k@0x70000(firmware),64k(art)ro
&spi {
	status = "okay";

	flash@0 {
		compatible = "jedec,spi-nor";
		reg = <0>;
		spi-max-frequency = <25000000>;

		partitions {
			compatible = "fixed-partitions";
			#address-cells = <1>;
			#size-cells = <1>;

			uboot: partition@0 {
				label = "u-boot";
				reg = <0x0 0x40000>;
				read-only;
			};

			partition@40000 {
				label = "u-boot-env";
				reg = <0x40000 0x10000>;
				read-only;
			};

			partition@50000 {
				label = "Config1";
				reg = <0x50000 0x10000>;
				read-only;
			};

			partition@60000 {
				label = "Config2";
				reg = <0x60000 0x10000>;
				read-only;
			};

			partition@70000 {
				compatible = "denx,uimage";
				label = "firmware";
				reg = <0x70000 0x780000>;
			};

			art: partition@ff0000 {
				label = "art";
				reg = <0x7f0000 0x10000>;
				read-only;
			};
		};
	};
};

&ref {
	clock-frequency = <40000000>;
};

/* GMAC0 is connected to a AR7400 PLC in PHY mode */
// ath79_init_mac(ath79_eth0_data.mac_addr, wifi_mac, 2);
// ath79_eth0_data.phy_if_mode = PHY_INTERFACE_MODE_RGMII;
// ath79_eth0_pll_data.pll_1000 = 0x0e000000;
// ath79_eth0_data.speed = SPEED_1000;
// ath79_eth0_data.duplex = DUPLEX_FULL;
// ath79_register_eth(0);
&eth0 {
	status = "okay";

	// pll-data = <0x02000000 0x00000101 0x00001616>;
	// This is <PLL_1000 PLL_100 PLL_10>
	pll-data = <0x0e000000 0x00000101 0x00001616>;

	nvmem-cells = <&macaddr_art_1002>;
	nvmem-cell-names = "mac-address";
	mac-address-increment = <2>;

	phy-mode = "rgmii";
	phy-handle = <&phy0>;
};

/* GMAC1 is connected to the internal switch */
// ath79_init_mac(ath79_eth1_data.mac_addr, wifi_mac, 1);
// ath79_eth1_data.phy_if_mode = PHY_INTERFACE_MODE_GMII;
// ath79_eth1_data.speed = SPEED_1000;
// ath79_eth1_data.duplex = DUPLEX_FULL;
// ath79_register_eth(1);
&eth1 {
	status = "okay";

	// Take the `AR934X_PLL_VAL_10*` values from 
	// upstream@19.07.8: target/linux/ar71xx/files/arch/mips/ath79/dev-eth.c
	// #define AR934X_PLL_VAL_1000	0x16000000
	// #define AR934X_PLL_VAL_100	0x00000101
	// #define AR934X_PLL_VAL_10	0x00001616
	pll-data = <0x16000000 0x00000101 0x00001616>;

	nvmem-cells = <&macaddr_art_1002>;
	nvmem-cell-names = "mac-address";
	mac-address-increment = <1>;

	phy-mode = "gmii";
        phy-handle = <&phy1>;
};

/*
&wmac {
	status = "okay";

	mtd-cal-data = <&art 0x1000>;
};
*/

/*
&pcie {
	status = "okay";

	wifi@0,0 {
		compatible = "qcom,ath10k";
		reg = <0 0 0 0 0>;
	};
};
*/

&mdio0 {
	status = "okay";

        // This is taken from 19.07
        // GMAC0 is connected to a AR7400 PLC in PHY mode */
        // ath79_init_mac(ath79_eth0_data.mac_addr, wifi_mac, 2);
        // ath79_eth0_data.phy_if_mode = PHY_INTERFACE_MODE_RGMII;
        // ath79_eth0_pll_data.pll_1000 = 0x0e000000;
        // ath79_eth0_data.speed = SPEED_1000;
        // ath79_eth0_data.duplex = DUPLEX_FULL;
        // ath79_register_eth(0);
        // This is the PLC
	phy0: ethernet-phy@0 {
		reg = <0>;
                phy-mode = "rgmii"; 
                qca,ar8327-initvals = <
                    // PORT0: GMII, no rx_/_tx_delay
                    //0x04 0x00000000 // EIKE: gmii
                    // EIKE:
                    // 0b100000000000000000000000000
                    // 0b100000000000100000000000000
                    //   |           |
                    //   |           +-> bit: 14 GMII phy mode
                    //   +-> bit 26: RGMII
                    // 0x04 0x07600000
                    0x04 0x04000000 // PORT0_PAD: RGMII
                    0x7c 0x0000007e // PORT0_STATUS: speed 1000, full duplex
                >;
	};

        // This is the ethernet switch (similar to the 1200ac)
        // BUT the config in 19.07 differs also to 500wp
        // In 19.07 it was:
        // * for 1200ac
        //   .mode = AR8327_PAD_MAC_RGMII,
        //   .txclk_delay_en = true,
        //   .rxclk_delay_en = false,
        //   .txclk_delay_sel = AR8327_CLK_DELAY_SEL1,
        //   .rxclk_delay_sel = AR8327_CLK_DELAY_SEL0,
        //   .mac06_exchange_dis = true,
        // * for 500wp:
        //   .mode = AR8327_PAD_PHY_RGMII,
        //   .txclk_delay_en = false,
        //   .rxclk_delay_en = false,
        //   .txclk_delay_sel = AR8327_CLK_DELAY_SEL0,
        //   .rxclk_delay_sel = AR8327_CLK_DELAY_SEL0,
	phy1: ethernet-phy@1 {
        // OR ... ethernet-switch@1 { ?
		reg = <0>;

                // The 19.07 set-up uses
                // AR934X_ETH_CFG_RGMII_GMAC0
                // #define AR934X_ETH_CFG_RGMII_GMAC0  BIT(0)
                // The 1200ac set-up (on which this is based uses
                // AR934X_ETH_CFG_RGMII_GMAC0 | AR934X_ETH_CFG_SW_ONLY_MODE
                // #define AR934X_ETH_CFG_RGMII_GMAC0  BIT(0)
                // #define AR934X_ETH_CFG_SW_ONLY_MODE BIT(6)
		// 1200ac was phy-mode = "rgmii";
                // EIKE: The 19.07 500wp uses ath79_eth1_data.phy_if_mode = PHY_INTERFACE_MODE_GMII;
                //phy-mode = "gmii"; 
                // EIKE: But at the same time it's using 
                //   static struct ar8327_pad_cfg dlan_pro_500_wp_ar8327_pad0_cfg = {
                //     .mode = AR8327_PAD_PHY_RGMII,
                phy-mode = "gmii"; 

                // FROM 1200ac
		// qca,ar8327-initvals = <
		// 	/* PORT0: RGMII, MAC0/6 exchange, tx_delay 01, No rx_delay */
		// 	0x04 0x06400000
		// 	0x08 0x00000000 /* PORT5 PAD MODE CTRL */
		// 	0x0c 0x00000000 /* PORT6 PAD MODE CTRL */
		// 	0x7c 0x0000007e /* PORT0_STATUS */
		// >;

		qca,ar8327-initvals = <
			// The 1200ac setup was:
			/* PORT0: RGMII, MAC0/6 exchange, tx_delay 01, No rx_delay */
			// 0x04 0x06400000
                        // _____110010000000000000000000000
                        //      ||  +-> bit-20 Mac0_rgmii_rxclk_delay_sel
                        //      |+-> bit-23: Mac0_rgmii_txclk_delay_sel
                        //      +-> bit-24: Mac0_rgmii_rxclk_delay_en
                        // The 500wp has no delay enabled (this should be the default)
			// The 19.07.8 board setup uses
			// * ath79_eth1_data.phy_if_mode = PHY_INTERFACE_MODE_GMII
			// * ath79_eth1_data.speed = SPEED_1000
			// * ath79_eth1_data.duplex = DUPLEX_FULL
                        // 0x04 0x00000000 // EIKE: gmii
                        0x04 0x02000000 // EIKE: rgmii
			0x08 0x00000000 /* PORT5 PAD MODE CTRL */
			0x0c 0x00000000 /* PORT6 PAD MODE CTRL */
			// 1200ac port0_status:
			// 0x7c 0x0000007e /* PORT0_STATUS */
			// => 0b001111110
			//      a | |  ++-> Speed 1000
			//        | | +---> Txmac enable
			//        | |+---> Rxmac enable
			//        | +---> Txmax flow control enable
			//        |+---> Rxmax flow control enable
			//        +---> Full duplex
			//       +---> TX_HALF_FLOW_EN_0
			//      a---> link up (1), down (0) (TODO: do we need this?)
			// EIKE: This could also make sense for 500wp at least
			// speed 1000 and full duplex
			0x7c 0x0000007e // PORT0_STATUS: speed 1000, full duplex
		>;
	};
};

&art {
	compatible = "nvmem-cells";
	#address-cells = <1>;
	#size-cells = <1>;

	macaddr_art_1002: macaddr@1002 {
		reg = <0x1002 0x6>;
	};
};
